
    var pageVueRenderFn = function anonymous(
) {
with(this){return _c('div',{attrs:{"id":"app"}},[_c('header',{attrs:{"sticky":""}},[_c('navbar',{attrs:{"type":"dark"},scopedSlots:_u([{key:"brand",fn:function(){return [_c('a',{staticClass:"navbar-brand",attrs:{"href":"https://se-education.org","title":"SE-EDU"}},[_c('span',[_c('span',{staticClass:"fas fa-chevron-circle-left",attrs:{"aria-hidden":"true"}}),_v(" "),_c('strong',[_c('strong',[_v("SE-EDU")])])])])]},proxy:true},{key:"right",fn:function(){return [_c('li',{staticClass:"nav-link"},[_c('form',{staticClass:"navbar-form"},[_c('searchbar',{attrs:{"data":searchData,"placeholder":"Search this site","on-hit":searchCallback,"menu-align-right":""}})],1)])]},proxy:true}])},[_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/guides/index.html"}},[_c('span',[_c('strong',[_v("Home")])])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"/guides/about.html"}},[_c('span',[_c('strong',[_v("About")])])])]),_v(" "),_c('li',[_c('a',{staticClass:"nav-link",attrs:{"href":"https://github.com/se-edu/guides"}},[_c('span',[_c('span',{staticClass:"fab fa-github",attrs:{"aria-hidden":"true"}})])])])])],1),_v(" "),_c('div',{attrs:{"id":"flex-body"}},[_c('div',{staticClass:"fixed-header-padding",attrs:{"id":"content-wrapper"}},[_m(0),_v(" "),_c('p'),_m(1),_v(" "),_m(2),_v(" "),_c('ul',[_c('li',[_c('strong',[_v("If submitting a PR for an existing issue,")]),_v(" "),_c('ul',[_m(3),_v(" "),_c('li',[_v("It's best to post in the issue to ask if it is OK for you to submit a PR for that issue and wait for approval.")]),_v(" "),_c('li',[_v("Check the issue discussion thread to see if there are "),_c('tooltip',{scopedSlots:_u([{key:"content",fn:function(){return [_v("Some activity during last seven days")]},proxy:true}])},[_c('em',[_v("active")])]),_v(" PRs for that issue. You can offer to PR for an issue that has "),_c('em',[_v("stalled")]),_v(" PRs i.e., there is a PRs submitted for that issue but the PR author seems to have stopped working on it.")],1)])]),_v(" "),_m(4)]),_v(" "),_m(5),_v(" "),_c('div',{attrs:{"id":"section-scoping-a-pr"}},[_m(6),_v(" "),_m(7),_v(" "),_c('ul',[_c('li',[_m(8),_v(" "),_c('box',{attrs:{"type":"wrong","seamless":""},scopedSlots:_u([{key:"icon",fn:function(){return [_c('span',{staticClass:"fas fa-exclamation-circle",attrs:{"aria-hidden":"true"}})]},proxy:true}])},[_v(" "),_c('p',[_v("Refrain from "),_c('tooltip',{scopedSlots:_u([{key:"content",fn:function(){return [_v("do minor improvements to the code e.g., fix typos")]},proxy:true}])},[_c('em',[_v("housekeeping")])]),_v(" in the neighboring code "),_c('strong',[_v("unless the line in concern is already touched by the PR")]),_v(" (i.e., the housekeeping does not increase the line count of the PR).")],1)]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("Rationale: Imagine we decide to revert the PR for some reason. If a PR contains, unrelated changes or multiple independent changes, we will not be able to revert the offending change without losing the other changes as well.")])]),_v(" "),_c('box',{attrs:{"type":"tip","seamless":""}},[_c('p',[_v("If you notice a need for housekeeping in the neighboring code as you do your PR, create an issue for it in the issue tracker.")])])],1),_v(" "),_m(9),_v(" "),_m(10)]),_v(" "),_c('box',{staticClass:"ml-4",attrs:{"type":"wrong","seamless":""},scopedSlots:_u([{key:"icon",fn:function(){return [_c('span',{staticClass:"fas fa-exclamation-circle",attrs:{"aria-hidden":"true"}})]},proxy:true}])},[_v(" "),_c('p',[_v("\"This PR is just the code fix. I'll update tests and documentation in a separate PR\" is not acceptable!")]),_v(" "),_c('p',[_v("However, it is fine to push the functional code first to get early feedback, as long as the rest is added to the same PR later.")])])],1),_v(" "),_m(11),_v(" "),_m(12),_v(" "),_m(13),_v(" "),_m(14),_v(" "),_m(15),_v(" "),_c('div',{staticClass:"indented-level1"},[_c('panel',{attrs:{"minimized":""},scopedSlots:_u([{key:"header",fn:function(){return [_c('p',[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-log-in",attrs:{"aria-hidden":"true"}})]),_v(" coding standards » Git » "),_c('strong',[_v("Branch naming conventions")])])]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_v("Follow these rules to improve consistency:")]),_v(" "),_c('ul',[_c('li',[_v("Use a meaningful name consisting of some relevant keywords, in the "),_c('em',[_v("kebab case")]),_v(" format e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("refactor-ui-tests")]),_v(".")]),_v(" "),_c('li',[_v("If the branch is related to an issue, use the format "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("issueNumber-some-keywords-from-issue-title")]),_v(" e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("1234-ui-freeze-error")])])])])])],1),_v(" "),_c('p'),_v(" "),_m(16),_v(" "),_m(17),_v(" "),_c('div',{staticClass:"indented-level1"},[_c('panel',{attrs:{"minimized":""},scopedSlots:_u([{key:"header",fn:function(){return [_c('p',[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-log-in",attrs:{"aria-hidden":"true"}})]),_v(" Conventions » Git » "),_c('strong',[_v("Commit message subject")])])]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('span',[_c('span',{staticClass:"badge rounded-pill bg-danger"},[_c('span',{staticClass:"far fa-star",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('strong',[_v("Every commit must have a well-written commit message "),_c('em',[_v("subject line")]),_v(".")])]),_v(" "),_c('ul',[_c('li',[_c('strong',[_v("Try to limit the subject line to 50 characters (hard limit: 72 chars)")])])]),_v(" "),_c('box',{attrs:{"type":"info","seamless":"","add-class":"ml-5"}},[_c('p',[_v("Rationale: Some tools show only a limited number of characters from the commit message.")])]),_v(" "),_c('p',[_c('span',[_c('span',{staticClass:"badge rounded-pill bg-danger"},[_c('span',{staticClass:"far fa-star",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('strong',[_c('mark',[_v("Use the imperative mood in the subject line.")])])]),_v(" "),_c('ul',[_c('li',[_c('span',{staticStyle:{"color":"green"}},[_c('span',[_c('strong',[_c('span',{staticClass:"fas fa-thumbs-up",attrs:{"aria-hidden":"true"}}),_v(" Good")])])]),_v(": "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Add README.md")])]),_v(" "),_c('li',[_c('span',{staticStyle:{"color":"red"}},[_c('span',[_c('strong',[_c('span',{staticClass:"fas fa-thumbs-down",attrs:{"aria-hidden":"true"}}),_v(" Bad")])])]),_v(": "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Added README.md")])]),_v(" "),_c('li',[_c('span',{staticStyle:{"color":"red"}},[_c('span',[_c('strong',[_c('span',{staticClass:"fas fa-thumbs-down",attrs:{"aria-hidden":"true"}}),_v(" Bad")])])]),_v(": "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Adding README.md")])])]),_v(" "),_c('p',[_c('span',[_c('span',{staticClass:"badge rounded-pill bg-danger"},[_c('span',{staticClass:"far fa-star",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('strong',[_v("Capitalize the first letter of the subject line.")])]),_v(" "),_c('ul',[_c('li',[_c('span',{staticStyle:{"color":"green"}},[_c('span',[_c('strong',[_c('span',{staticClass:"fas fa-thumbs-up",attrs:{"aria-hidden":"true"}}),_v(" Good")])])]),_v(": "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Move index.html file to root")])]),_v(" "),_c('li',[_c('span',{staticStyle:{"color":"red"}},[_c('span',[_c('strong',[_c('span',{staticClass:"fas fa-thumbs-down",attrs:{"aria-hidden":"true"}}),_v(" Bad")])])]),_v(": "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("move index.html file to root")])])]),_v(" "),_c('p',[_c('span',[_c('span',{staticClass:"badge rounded-pill bg-danger"},[_c('span',{staticClass:"far fa-star",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('strong',[_v("Do not end the subject line with a period.")])]),_v(" "),_c('ul',[_c('li',[_c('span',{staticStyle:{"color":"green"}},[_c('span',[_c('strong',[_c('span',{staticClass:"fas fa-thumbs-up",attrs:{"aria-hidden":"true"}}),_v(" Good")])])]),_v(": "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Update sample data")])]),_v(" "),_c('li',[_c('span',{staticStyle:{"color":"red"}},[_c('span',[_c('strong',[_c('span',{staticClass:"fas fa-thumbs-down",attrs:{"aria-hidden":"true"}}),_v(" Bad")])])]),_v(": "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Update sample data.")])])]),_v(" "),_c('box',{attrs:{"type":"tip","seamless":""}},[_c('p',[_v("You can use "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("scope: change")]),_v(" format or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("category: change")]),_v(" (when applicable).")]),_v(" "),_c('ul',[_c('li',[_v("e.g. "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Person class: remove static imports")]),_c('br'),_v(" "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Main.java: Remove blank lines")]),_c('br'),_v(" "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("bug fix: Add space after name")])])])]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("There are other commit subject conventions such as the "),_c('a',{attrs:{"href":"https://www.conventionalcommits.org/"}},[_c('em',[_v("Conventional Commits")]),_v(" Format")]),_v(" which are more elaborate but have additional benefits.")])])],1)])],1),_v(" "),_c('p'),_v(" "),_c('div',{staticClass:"indented-level1"},[_c('panel',{attrs:{"minimized":""},scopedSlots:_u([{key:"header",fn:function(){return [_c('p',[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-log-in",attrs:{"aria-hidden":"true"}})]),_v(" Conventions » Git » "),_c('strong',[_v("Commit message body")])])]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('span',[_c('span',{staticClass:"badge rounded-pill bg-danger"},[_c('span',{staticClass:"far fa-star",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('strong',[_v("Commit messages for non-trivial commits should have a "),_c('em',[_v("body")]),_v(" giving details of the commit.")])]),_v(" "),_c('ul',[_c('li',[_c('strong',[_v("Separate subject from body with a blank line.")])]),_v(" "),_c('li',[_c('strong',[_v("Wrap the body at 72 characters.")])]),_v(" "),_c('li',[_c('strong',[_v("Use blank lines to separate paragraphs.")])])]),_v(" "),_c('p',[_v("Example: A commit message for a commit that is part of a multi-commit PR:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("Unify variations of toSet() methods\n")]),_c('span',[_v("\n")]),_c('span',[_v("There are several methods that convert a collection to a set. In some\n")]),_c('span',[_v("cases the conversion is in-lined as a code block in another method.\n")]),_c('span',[_v("\n")]),_c('span',[_v("Unifying all those duplicated code improves the code quality.\n")]),_c('span',[_v("\n")]),_c('span',[_v("As a step towards such unification, let's extract those duplicated code\n")]),_c('span',[_v("blocks into separate methods in their respective classes. Doing so will\n")]),_c('span',[_v("make the subsequent unification easier.\n")])]),_c('div',{staticClass:"function-btn-container"},[_c('button',{staticClass:"function-btn d-print-none",attrs:{"onclick":"copyCodeBlock(this)"}},[_v("\n    "),_c('div',{staticClass:"function-btn-body"},[_v("\n    \n"),_c('svg',{attrs:{"xmlns":"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink","width":"18","height":"18","viewBox":"0 0 18 18","version":"1.1"}},[_v("\n    "),_c('g',{attrs:{"id":"surface1"}},[_v("\n      "),_c('path',{attrs:{"d":"M 11.273438 0 L 2.546875 0 C 1.746094 0 1.089844 0.613281 1.089844\n      1.363281 L 1.089844 10.910156 L 2.546875 10.910156 L 2.546875 1.363281 L 11.273438\n      1.363281 Z M 13.453125 2.726562 L 5.453125 2.726562 C 4.65625 2.726562 4 3.339844 4\n      4.089844 L 4 13.636719 C 4 14.386719 4.65625 15 5.453125 15 L 13.453125 15 C 14.253906\n      15 14.910156 14.386719 14.910156 13.636719 L 14.910156 4.089844 C 14.910156 3.339844\n      14.253906 2.726562 13.453125 2.726562 Z M 13.453125 13.636719 L 5.453125 13.636719 L\n      5.453125 4.089844 L 13.453125 4.089844 Z M 13.453125 13.636719 "}}),_v("\n    ")]),_v("\n")]),_v("\n\n    ")]),_v("\n    ")])])]),_c('box',{attrs:{"type":"tip","seamless":""}},[_c('p',[_v("Tips for SourceTree users:")]),_v(" "),_c('ul',[_c('li',[_c('strong',[_v("Enable the column guide option")]),_v(" to help you keep the commit message width to a 72 characters:\n"),_c('ol',[_c('li',[_v("Choose "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Tools")]),_v(" -> "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Options")]),_v(".")]),_v(" "),_c('li',[_v("Click on the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("General")]),_v(" tab, scroll down to the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Commit settings")]),_v(" section.")]),_v(" "),_c('li',[_v("Tick the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Display a column guide at commit message at [72] characters")]),_v(" option (if this option is disabled, first tick the option "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("used fixed-width fonts for commit messages")]),_v(" "),_c('span',{staticClass:"dimmed"},[_v("-- reason: a column guide makes sense only if a fixed-width font is used")]),_v(").")])])]),_v(" "),_c('li',[_c('strong',[_v("Enable the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("spell check commit messages")]),_v(" option")]),_v(" (found in the same place as above) too.")])])]),_v(" "),_c('p',[_c('span',[_c('span',{staticClass:"badge rounded-pill bg-danger"},[_c('span',{staticClass:"far fa-star",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('strong',[_v("Use bullet points as necessary.")]),_v(" Instead of relying entirely on paragraphs of text, use other constructs such as bullet lists when it helps.")]),_v(" "),_c('p',[_v("Example: A commit message for a bug fix:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("Find command: make matching case-insensitive\n")]),_c('span',[_v("\n")]),_c('span',[_v("Find command is case-sensitive.\n")]),_c('span',[_v("\n")]),_c('span',[_v("A case-insensitive find is more user-friendly because users cannot be\n")]),_c('span',[_v("expected to remember the exact case of the keywords.\n")]),_c('span',[_v("\n")]),_c('span',[_v("Let's,\n")]),_c('span',[_v("* update the search algorithm to use case-insensitive matching\n")]),_c('span',[_v("* add a script to migrate stress tests to the new format\n")])]),_c('div',{staticClass:"function-btn-container"},[_c('button',{staticClass:"function-btn d-print-none",attrs:{"onclick":"copyCodeBlock(this)"}},[_v("\n    "),_c('div',{staticClass:"function-btn-body"},[_v("\n    \n"),_c('svg',{attrs:{"xmlns":"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink","width":"18","height":"18","viewBox":"0 0 18 18","version":"1.1"}},[_v("\n    "),_c('g',{attrs:{"id":"surface1"}},[_v("\n      "),_c('path',{attrs:{"d":"M 11.273438 0 L 2.546875 0 C 1.746094 0 1.089844 0.613281 1.089844\n      1.363281 L 1.089844 10.910156 L 2.546875 10.910156 L 2.546875 1.363281 L 11.273438\n      1.363281 Z M 13.453125 2.726562 L 5.453125 2.726562 C 4.65625 2.726562 4 3.339844 4\n      4.089844 L 4 13.636719 C 4 14.386719 4.65625 15 5.453125 15 L 13.453125 15 C 14.253906\n      15 14.910156 14.386719 14.910156 13.636719 L 14.910156 4.089844 C 14.910156 3.339844\n      14.253906 2.726562 13.453125 2.726562 Z M 13.453125 13.636719 L 5.453125 13.636719 L\n      5.453125 4.089844 L 13.453125 4.089844 Z M 13.453125 13.636719 "}}),_v("\n    ")]),_v("\n")]),_v("\n\n    ")]),_v("\n    ")])])]),_c('p',[_c('span',[_c('span',{staticClass:"badge rounded-pill bg-warning text-white"},[_c('span',{staticClass:"far fa-star",attrs:{"aria-hidden":"true"}}),_c('span',{staticClass:"far fa-star",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('strong',[_v("Explain WHAT, WHY, not HOW")]),_v(".")]),_v(" "),_c('ul',[_c('li',[_c('p',[_v("Use the body to explain WHAT the commit is about and WHY it was done that way. The reader can refer to the diff to understand HOW the change was done.")])]),_v(" "),_c('li',[_c('p',[_v("Give an explanation for the change(s) that is detailed enough so that the reader can judge if it is a good thing to do, without reading the actual diff to determine how well the code does what the explanation promises to do."),_c('br'),_v("\nIf your description starts to get too long, that's a sign that you probably need to split up your commit to finer grained pieces. [adapted from: "),_c('a',{attrs:{"href":"https://github.com/git/git/blob/e05806da9ec4aff8adfed142ab2a2b3b02e33c8c/Documentation/SubmittingPatches#L37-L132"}},[_v("git project")]),_v("]")])]),_v(" "),_c('li',[_c('p',[_v("Minimize repeating information that are given in code comments of the same commit.")])])]),_v(" "),_c('p',[_c('span',[_c('span',{staticClass:"badge rounded-pill bg-success"},[_c('span',{staticClass:"far fa-star",attrs:{"aria-hidden":"true"}}),_c('span',{staticClass:"far fa-star",attrs:{"aria-hidden":"true"}}),_c('span',{staticClass:"far fa-star",attrs:{"aria-hidden":"true"}})])]),_v(" "),_c('strong',[_v("Structure the body as follows")]),_v(":")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("{current situation} -- use present tense\n")]),_c('span',[_v("\n")]),_c('span',[_v("{why it needs to change}\n")]),_c('span',[_v("\n")]),_c('span',[_v("{what is being done about it} -- use imperative mood\n")]),_c('span',[_v("\n")]),_c('span',[_v("{why it is done that way}\n")]),_c('span',[_v("\n")]),_c('span',[_v("{any other relevant info}\n")])]),_c('div',{staticClass:"function-btn-container"},[_c('button',{staticClass:"function-btn d-print-none",attrs:{"onclick":"copyCodeBlock(this)"}},[_v("\n    "),_c('div',{staticClass:"function-btn-body"},[_v("\n    \n"),_c('svg',{attrs:{"xmlns":"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink","width":"18","height":"18","viewBox":"0 0 18 18","version":"1.1"}},[_v("\n    "),_c('g',{attrs:{"id":"surface1"}},[_v("\n      "),_c('path',{attrs:{"d":"M 11.273438 0 L 2.546875 0 C 1.746094 0 1.089844 0.613281 1.089844\n      1.363281 L 1.089844 10.910156 L 2.546875 10.910156 L 2.546875 1.363281 L 11.273438\n      1.363281 Z M 13.453125 2.726562 L 5.453125 2.726562 C 4.65625 2.726562 4 3.339844 4\n      4.089844 L 4 13.636719 C 4 14.386719 4.65625 15 5.453125 15 L 13.453125 15 C 14.253906\n      15 14.910156 14.386719 14.910156 13.636719 L 14.910156 4.089844 C 14.910156 3.339844\n      14.253906 2.726562 13.453125 2.726562 Z M 13.453125 13.636719 L 5.453125 13.636719 L\n      5.453125 4.089844 L 13.453125 4.089844 Z M 13.453125 13.636719 "}}),_v("\n    ")]),_v("\n")]),_v("\n\n    ")]),_v("\n    ")])])]),_c('ul',[_c('li',[_v("Avoid terms such as 'currently', 'originally' when describing the current situation. They are implied.")]),_v(" "),_c('li',[_v("The word "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Let's")]),_v(" can be used to indicate the beginning of the section that describes the change done in the commit.")])]),_v(" "),_c('p',[_v("Example: A commit message for a code quality refactoring:")]),_v(" "),_c('pre',[_c('code',{pre:true,attrs:{"class":"hljs"}},[_c('span',[_v("Person attributes classes: extract a parent class PersonAttribute\n")]),_c('span',[_v("\n")]),_c('span',[_v("Person attribute classes (e.g. Name, Address, Age etc.) have some common\n")]),_c('span',[_v("behaviors (e.g. isValid()).\n")]),_c('span',[_v("\n")]),_c('span',[_v("The common behaviors across person attribute classes cause code duplication.\n")]),_c('span',[_v("\n")]),_c('span',[_v("Extracting the common behavior into a super class allows us to use\n")]),_c('span',[_v("polymorphism when dealing with person attributes. For example, validity\n")]),_c('span',[_v("checking can be done for all attributes of a person in one loop.\n")]),_c('span',[_v("\n")]),_c('span',[_v("Let's pull up behaviors common to all person attribute classes into a new\n")]),_c('span',[_v("parent class named PersonAttribute.\n")]),_c('span',[_v("\n")]),_c('span',[_v("Using inheritance is preferable over composition in this situation\n")]),_c('span',[_v("because the common behaviors are not composable.\n")]),_c('span',[_v("\n")]),_c('span',[_v("Refer to this S/O discussion on dealing with attributes\n")]),_c('span',[_v("http://stackoverflow.com/some/question\n")])]),_c('div',{staticClass:"function-btn-container"},[_c('button',{staticClass:"function-btn d-print-none",attrs:{"onclick":"copyCodeBlock(this)"}},[_v("\n    "),_c('div',{staticClass:"function-btn-body"},[_v("\n    \n"),_c('svg',{attrs:{"xmlns":"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink","width":"18","height":"18","viewBox":"0 0 18 18","version":"1.1"}},[_v("\n    "),_c('g',{attrs:{"id":"surface1"}},[_v("\n      "),_c('path',{attrs:{"d":"M 11.273438 0 L 2.546875 0 C 1.746094 0 1.089844 0.613281 1.089844\n      1.363281 L 1.089844 10.910156 L 2.546875 10.910156 L 2.546875 1.363281 L 11.273438\n      1.363281 Z M 13.453125 2.726562 L 5.453125 2.726562 C 4.65625 2.726562 4 3.339844 4\n      4.089844 L 4 13.636719 C 4 14.386719 4.65625 15 5.453125 15 L 13.453125 15 C 14.253906\n      15 14.910156 14.386719 14.910156 13.636719 L 14.910156 4.089844 C 14.910156 3.339844\n      14.253906 2.726562 13.453125 2.726562 Z M 13.453125 13.636719 L 5.453125 13.636719 L\n      5.453125 4.089844 L 13.453125 4.089844 Z M 13.453125 13.636719 "}}),_v("\n    ")]),_v("\n")]),_v("\n\n    ")]),_v("\n    ")])])]),_c('box',{attrs:{"type":"info"}},[_c('p',[_v("Refer to the article "),_c('em',[_c('a',{attrs:{"href":"http://chris.beams.io/posts/git-commit/"}},[_v("How to Write a Git Commit Message")])]),_v(" for more advice on writing good commit messages.")])])],1)])],1),_v(" "),_c('p'),_v(" "),_m(18),_v(" "),_c('div',{staticClass:"indented-level1"},[_c('panel',{attrs:{"minimized":""},scopedSlots:_u([{key:"header",fn:function(){return [_c('p',[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-log-in",attrs:{"aria-hidden":"true"}})]),_v(" Guidelines » "),_c('strong',[_v("Commit organization")])])]},proxy:true}])},[_v(" "),_c('div',[_c('h1',{attrs:{"id":"working-with-git"}},[_v("Working with Git"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#working-with-git","onclick":"event.stopPropagation()"}})]),_v(" "),_c('span',{attrs:{"id":"section-organizing-commits"}},[_c('h2',{attrs:{"id":"organizing-commits"}},[_v("Organizing commits"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#organizing-commits","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Commits in a branch or a PR is said to be "),_c('em',[_v("well-organized")]),_v(" if they have the following qualities:")]),_v(" "),_c('ul',[_c('li',[_c('p',[_c('strong',[_v("Each commit contains a single logical change, and this change must stand on its own.")]),_v(" i.e. each commit has a single responsibility, and that responsibility must be fully carried out."),_c('br'),_v("\nFor example, if the commit message says "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Move delete() from Person class to Address class")]),_v(", the commit cannot contain the addition of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("delete()")]),_v(" to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Address")]),_v(" class only; it should also contain the deletion of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("delete()")]),_v(" from the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Person")]),_v(" class for it to be a "),_c('em',[_v("complete")]),_v(" implementation what is stated in the commit message.")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Each commit has a "),_c('em',[_v("well-written")]),_v(" commit message")]),_v(" i.e., it follows "),_c('a',{attrs:{"href":"/guides/conventions/git.html"}},[_v("these guidelines")]),_v(".")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Commits are ordered in a bottom-up fashion")]),_v(", each commit building on top of the previous one towards the end goal of the PR.")]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("Rationale: Reviewers should be able to review one commit at a time.")])])],1),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Ideally, a commit does not modify more than 100 lines of code.")])]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("Rationale: Bigger commits are harder to review.")]),_v(" "),_c('p',[_c('span',{staticClass:"fas fa-quote-left",attrs:{"aria-hidden":"true"}}),_v(" \"Ask a programmer to review 10 lines of code, he'll find 10 issues. Ask him to do 500 lines and he'll say it\nlooks good.\" --["),_c('a',{attrs:{"href":"https://twitter.com/girayozil/status/306836785739210752"}},[_v("source")]),_v("]")])]),_v(" "),_c('p',[_v("Commits containing "),_c('em',[_c('em',[_v("mechanical changes")])]),_v(" (e.g. automated refactorings, cut-paste type code movements, file renames, etc.),")]),_v(" "),_c('ul',[_c('li',[_v("should include only one "),_c('em',[_v("mechanical change")]),_v("  per commit e.g., rename a single variable across the code base.")]),_v(" "),_c('li',[_v("should not contain other non-mechanical changes, unless unavoidable.")]),_v(" "),_c('li',[_v("can exceed 100 LoC.")]),_v(" "),_c('li',[_v("should have the description of the change in the commit message (so that the results can be reproduced).")])])],1),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Every commit pass CI.")]),_v(" when you merge a series of commits (without squashing), every commit in your push (not just the last commit) should pass CI.")]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("Rationale: Build-breaking commits in the version history hinder the ability to use "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git bisect")]),_v(" for locating bugs.")])])],1)]),_v(" "),_c('box',{attrs:{"type":"info"}},[_c('p',[_c('a',{attrs:{"href":"https://github.com/se-edu/addressbook-level4/pull/237"}},[_v("Here")]),_v(" is an example PR of commits that are organized as described above.")])]),_v(" "),_c('p',[_c('strong',[_v("Refactor commits before pushing.")]),_v(" It is unlikely that you can produce a series of commits that meet all the above criteria in the first try. In such cases, refactor commits until they meet the criteria. "),_c('a',{attrs:{"href":"http://stackoverflow.com/a/1186549"}},[_v("This S/O post")]),_v(" describes how to refactor commits (even easier to do with visual tools such as SourceTree -- see "),_c('a',{attrs:{"href":"https://www.youtube.com/watch?v=mBCJCuU3p7I"}},[_v("this video")]),_v(").")])],1),_v(" "),_c('span',{attrs:{"id":"section-merging-branches"}},[_c('h2',{attrs:{"id":"merging-branches"}},[_v("Merging branches"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#merging-branches","onclick":"event.stopPropagation()"}})]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("When merging branch, the aim is to keep the version history neat so that it is easy to do things such as the following:")]),_v(" "),_c('ul',[_c('li',[_v("Find which commit introduced a bug using "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git bisect")]),_v(".")]),_v(" "),_c('li',[_v("Undo a specific change by reverting a commit in the history without breaking anything else.")])])]),_v(" "),_c('ul',[_c('li',[_c('strong',[_v("The default strategy is to do a "),_c('em',[_v("squash-merge")]),_v(".")]),_v(" This is suitable when the branch tackles one task but multiple commits that are not well-organized (as per the definition of 'well-organized' in the panel below).")])]),_v(" "),_c('div',{staticClass:"indented-level1"},[_c('panel',{attrs:{"minimized":""},scopedSlots:_u([{key:"header",fn:function(){return [_c('p',[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-log-in",attrs:{"aria-hidden":"true"}})]),_v(" Guidelines » Working with git » "),_c('strong',[_v("Organizing commits")])])]},proxy:true}])},[_v(" "),_c('div',[_c('h2',{attrs:{"id":"organizing-commits-2"}},[_v("Organizing commits"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#organizing-commits-2","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Commits in a branch or a PR is said to be "),_c('em',[_v("well-organized")]),_v(" if they have the following qualities:")]),_v(" "),_c('ul',[_c('li',[_c('p',[_c('strong',[_v("Each commit contains a single logical change, and this change must stand on its own.")]),_v(" i.e. each commit has a single responsibility, and that responsibility must be fully carried out."),_c('br'),_v("\nFor example, if the commit message says "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Move delete() from Person class to Address class")]),_v(", the commit cannot contain the addition of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("delete()")]),_v(" to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Address")]),_v(" class only; it should also contain the deletion of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("delete()")]),_v(" from the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Person")]),_v(" class for it to be a "),_c('em',[_v("complete")]),_v(" implementation what is stated in the commit message.")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Each commit has a "),_c('em',[_v("well-written")]),_v(" commit message")]),_v(" i.e., it follows "),_c('a',{attrs:{"href":"/guides/conventions/git.html"}},[_v("these guidelines")]),_v(".")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Commits are ordered in a bottom-up fashion")]),_v(", each commit building on top of the previous one towards the end goal of the PR.")]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("Rationale: Reviewers should be able to review one commit at a time.")])])],1),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Ideally, a commit does not modify more than 100 lines of code.")])]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("Rationale: Bigger commits are harder to review.")]),_v(" "),_c('p',[_c('span',{staticClass:"fas fa-quote-left",attrs:{"aria-hidden":"true"}}),_v(" \"Ask a programmer to review 10 lines of code, he'll find 10 issues. Ask him to do 500 lines and he'll say it\nlooks good.\" --["),_c('a',{attrs:{"href":"https://twitter.com/girayozil/status/306836785739210752"}},[_v("source")]),_v("]")])]),_v(" "),_c('p',[_v("Commits containing "),_c('em',[_c('em',[_v("mechanical changes")])]),_v(" (e.g. automated refactorings, cut-paste type code movements, file renames, etc.),")]),_v(" "),_c('ul',[_c('li',[_v("should include only one "),_c('em',[_v("mechanical change")]),_v("  per commit e.g., rename a single variable across the code base.")]),_v(" "),_c('li',[_v("should not contain other non-mechanical changes, unless unavoidable.")]),_v(" "),_c('li',[_v("can exceed 100 LoC.")]),_v(" "),_c('li',[_v("should have the description of the change in the commit message (so that the results can be reproduced).")])])],1),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Every commit pass CI.")]),_v(" when you merge a series of commits (without squashing), every commit in your push (not just the last commit) should pass CI.")]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("Rationale: Build-breaking commits in the version history hinder the ability to use "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git bisect")]),_v(" for locating bugs.")])])],1)]),_v(" "),_c('box',{attrs:{"type":"info"}},[_c('p',[_c('a',{attrs:{"href":"https://github.com/se-edu/addressbook-level4/pull/237"}},[_v("Here")]),_v(" is an example PR of commits that are organized as described above.")])]),_v(" "),_c('p',[_c('strong',[_v("Refactor commits before pushing.")]),_v(" It is unlikely that you can produce a series of commits that meet all the above criteria in the first try. In such cases, refactor commits until they meet the criteria. "),_c('a',{attrs:{"href":"http://stackoverflow.com/a/1186549"}},[_v("This S/O post")]),_v(" describes how to refactor commits (even easier to do with visual tools such as SourceTree -- see "),_c('a',{attrs:{"href":"https://www.youtube.com/watch?v=mBCJCuU3p7I"}},[_v("this video")]),_v(").")])],1)])],1),_v(" "),_c('p'),_v(" "),_c('ul',[_c('li',[_c('p',[_c('strong',[_v("Use a "),_c('em',[_v("merge commit")])]),_v(" if the commits are well-organized, and the branch tackles only one task. In this case the commit message of the merge commit should explain the full task.")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Use a "),_c('em',[_v("rebase-merge")])]),_v(" if the commits are well-organized and each commit is an independent task (as opposed to steps or a bigger tasks).")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("In other cases")]),_v(", consider reorganizing/splitting the branch to match one of the above.\n")])])])],1),_c('p')])])],1),_v(" "),_c('p'),_v(" "),_m(19),_v(" "),_c('div',{staticClass:"indented-level1"},[_c('panel',{attrs:{"minimized":""},scopedSlots:_u([{key:"header",fn:function(){return [_c('p',[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-log-in",attrs:{"aria-hidden":"true"}})]),_v(" This document » "),_c('strong',[_v("Scoping a PR")])])]},proxy:true}])},[_v(" "),_c('div',[_c('p',[_c('strong',[_v("General rule: try to keep PRs as small as possible")]),_v(" because smaller PRs get merged faster.")]),_v(" "),_c('p',[_c('strong',[_v("A PR should contain a "),_c('em',[_v("single")]),_v(", "),_c('em',[_v("standalone")]),_v(", and "),_c('em',[_v("complete")]),_v(" change to the code base")]),_v(", unless in exceptional cases where the PR is part of a bigger change.")]),_v(" "),_c('ul',[_c('li',[_c('p',[_c('em',[_v("Single")]),_v(" means a PR "),_c('strong',[_v("should not try to fix more than one fix")]),_v(", unless there are multiple things that "),_c('em',[_v("must")]),_v(" be done together or not at all.")]),_v(" "),_c('box',{attrs:{"type":"wrong","seamless":""},scopedSlots:_u([{key:"icon",fn:function(){return [_c('span',{staticClass:"fas fa-exclamation-circle",attrs:{"aria-hidden":"true"}})]},proxy:true}])},[_v(" "),_c('p',[_v("Refrain from "),_c('tooltip',{scopedSlots:_u([{key:"content",fn:function(){return [_v("do minor improvements to the code e.g., fix typos")]},proxy:true}])},[_c('em',[_v("housekeeping")])]),_v(" in the neighboring code "),_c('strong',[_v("unless the line in concern is already touched by the PR")]),_v(" (i.e., the housekeeping does not increase the line count of the PR).")],1)]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("Rationale: Imagine we decide to revert the PR for some reason. If a PR contains, unrelated changes or multiple independent changes, we will not be able to revert the offending change without losing the other changes as well.")])]),_v(" "),_c('box',{attrs:{"type":"tip","seamless":""}},[_c('p',[_v("If you notice a need for housekeeping in the neighboring code as you do your PR, create an issue for it in the issue tracker.")])])],1),_v(" "),_c('li',[_c('p',[_c('em',[_v("Standalone")]),_v(" means the PR "),_c('strong',[_v("should contain a meaningful change that moves the code base from one working state to another")]),_v(".")])]),_v(" "),_c('li',[_c('p',[_c('em',[_v("Complete")]),_v(" means the PR "),_c('strong',[_v("should contain everything related to the change")]),_v(", including the following:")]),_v(" "),_c('ul',[_c('li',[_v("functional code")]),_v(" "),_c('li',[_v("code comments")]),_v(" "),_c('li',[_v("test cases")]),_v(" "),_c('li',[_v("user docs and developer docs")])])])]),_v(" "),_c('box',{staticClass:"ml-4",attrs:{"type":"wrong","seamless":""},scopedSlots:_u([{key:"icon",fn:function(){return [_c('span',{staticClass:"fas fa-exclamation-circle",attrs:{"aria-hidden":"true"}})]},proxy:true}])},[_v(" "),_c('p',[_v("\"This PR is just the code fix. I'll update tests and documentation in a separate PR\" is not acceptable!")]),_v(" "),_c('p',[_v("However, it is fine to push the functional code first to get early feedback, as long as the rest is added to the same PR later.")])])],1)])],1),_v(" "),_c('p'),_v(" "),_m(20),_v(" "),_m(21),_v(" "),_c('ol',[_c('li',[_v("Run code style checks (if any) to ensure the code complies with the project standards.")]),_v(" "),_c('li',[_v("Push the branch to your fork.")]),_v(" "),_m(22),_v(" "),_c('li',[_v("Check the draft PR on GitHub to confirm the following:\n"),_c('ul',[_m(23),_v(" "),_c('li',[_v("it does not contain any unintended changes.")]),_v(" "),_c('li',[_v("it passes "),_c('tooltip',{scopedSlots:_u([{key:"content",fn:function(){return [_v("Continuous Integration (Travis, AppVeyor, GitHub Actions, etc.)")]},proxy:true}])},[_v("CI")]),_v(" checks, if any.")],1)])]),_v(" "),_m(24)]),_v(" "),_m(25),_v(" "),_m(26),_v(" "),_m(27),_v(" "),_m(28),_v(" "),_c('div',{staticClass:"indented-level1"},[_c('panel',{attrs:{"minimized":""},scopedSlots:_u([{key:"header",fn:function(){return [_c('p',[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-log-in",attrs:{"aria-hidden":"true"}})]),_v(" Guidelines » "),_c('strong',[_v("Best practices for reviewing PRs")])])]},proxy:true}])},[_v(" "),_c('div',[_c('h1',{attrs:{"id":"best-practices-for-reviewing-prs"}},[_v("Best practices for reviewing PRs"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#best-practices-for-reviewing-prs","onclick":"event.stopPropagation()"}})]),_v(" "),_c('div',{staticClass:"lead"},[_c('p',[_v("Reviewing PRs is not just about the code or the tools, "),_c('strong',[_v("the way you phrase your comments matters too")]),_v(", especially if you are a peer reviewer.")])]),_v(" "),_c('h2',{attrs:{"id":"best-practices-for-reviewers"}},[_v("Best practices for reviewers"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#best-practices-for-reviewers","onclick":"event.stopPropagation()"}})]),_v(" "),_c('ul',[_c('li',[_c('strong',[_v("Add specific comments at relevant places of the code")]),_v(", rather than give one overall comment for the entire PR.\n"),_c('ul',[_c('li',[_v("It is typical for the comment to be added right below the code line it refers to."),_c('br'),_v("\nIt is possible to "),_c('a',{attrs:{"href":"https://twitter.com/natfriedman/status/1179097330097643521"}},[_v("mark multiple lines")]),_v(" as linked to the comment too.")]),_v(" "),_c('li',[_v("You can use Markdown (specifically, "),_c('a',{attrs:{"href":"https://guides.github.com/features/mastering-markdown/"}},[_v("GitHub-Flavored Markdown")]),_v(") in your comments.")])])]),_v(" "),_c('li',[_c('mark',[_c('strong',[_v("It's best to phrase comments as questions")])]),_v(", especially if you are a peer reviewer."),_c('br'),_v("\ne.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Should this be extracted out?")]),_v(" rather than "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Extract this out")]),_v(" or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("This should be extracted out")]),_v(".")]),_v(" "),_c('li',[_c('strong',[_v("Say 'I like', not 'good/bad'")]),_v(". Consider these two alternatives:"),_c('br'),_v("\nOption 1: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("This separation of X from Y is good")]),_v(" (or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("correct")]),_v(" or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("wrong")]),_v(" or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("bad")]),_v(")"),_c('br'),_v("\nOption 2: "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("I like how you separated X from Y")]),_v(" (or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("didn't like")]),_v(" or "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Not sure I like")]),_v(")"),_c('br'),_v("\nThe second one is less judgemental and less likely to cause the author to become defensive.")]),_v(" "),_c('li',[_c('strong',[_v("Feel free to ask for more info from the author")]),_v(", to help you understand the code/design. For example, you can ask why the author chose to write the code in a specific way.")]),_v(" "),_c('li',[_c('strong',[_v("You can also suggest alternatives for the author to consider.")]),_c('br'),_v("\nCombining this with the previous point, you can ask "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Any reason why you did it this way instead of that way?")])]),_v(" "),_c('li',[_c('strong',[_v("Feel free to compliment the author when appropriate")]),_v(" instead of focusing on negative things only."),_c('br'),_v(" "),_c('span',{staticClass:"dimmed"},[_v("e.g., "),_c('em',[_v("hey, I like how clean this bit of code is")]),_v(" 👍")])]),_v(" "),_c('li',[_c('strong',[_v("Say please, but don't say "),_c('em',[_v("please")])]),_v(". Beware of overusing 'please' as it can be interpreted as a condescending tone. For example, someone can interpret "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Please use better variable names")]),_v(" as "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Please for the love of God can you use better variable names?")]),_v(". Instead, you can say "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Perhaps a more intuitive variable name here?")]),_v(" which doesn't run any risk of misinterpretation.")]),_v(" "),_c('li',[_c('strong',[_v("No need to repeat the same comment "),_c('em',[_v("many")]),_v(" times")]),_v(". It's not the job of the reviewer to clean up after a sloppy author. If you notice the same problem in multiple places, after commenting an a few of them, you can simply say "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("... I noticed the same issue in several other places too")]),_v(".")]),_v(" "),_c('li',[_c('strong',[_v("Remember the "),_c('em',[_v("other")]),_v(" readers")]),_v(". PR comments can be read by people other than the reviewer and the author e.g., future programmers. Use regular English and avoid slang, colloquialisms, cultural references etc.")])]),_v(" "),_c('p',[_c('strong',[_c('strong',[_v("Further readings")])]),_v(":")]),_v(" "),_c('ul',[_c('li',[_v("Read the blog post "),_c('a',{attrs:{"href":"https://developers.redhat.com/blog/2019/07/08/10-tips-for-reviewing-code-you-dont-like/"}},[_c('strong',[_v("10 tips for reviewing code you don’t like")])]),_v(" - by David Lloyd (a Red Hat developer).")])]),_v(" "),_c('h2',{attrs:{"id":"best-practices-for-authors"}},[_v("Best practices for authors"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#best-practices-for-authors","onclick":"event.stopPropagation()"}})]),_v(" "),_c('ul',[_c('li',[_c('strong',[_v("Don't get into arguments with reviewers.")]),_v(" If you disagree with the reviewer, you can explain your own view in a non-confrontational way without trying to prove your way is better.")]),_v(" "),_c('li',[_v("Thank reviewers for their inputs.")])])])])],1),_v(" "),_c('p'),_v(" "),_c('p'),_v(" "),_m(29),_v(" "),_c('p'),_v(" "),_m(30),_v(" "),_m(31),_v(" "),_c('p',[_v("Follow the convention for Git branch merging, as given in the panel below.")]),_v(" "),_c('div',{staticClass:"indented-level1"},[_c('panel',{attrs:{"minimized":""},scopedSlots:_u([{key:"header",fn:function(){return [_c('p',[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-log-in",attrs:{"aria-hidden":"true"}})]),_v(" Guidelines » Working with Git » "),_c('strong',[_v("Branch merging strategy")])])]},proxy:true}])},[_v(" "),_c('div',[_c('h2',{attrs:{"id":"merging-branches-2"}},[_v("Merging branches"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#merging-branches-2","onclick":"event.stopPropagation()"}})]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("When merging branch, the aim is to keep the version history neat so that it is easy to do things such as the following:")]),_v(" "),_c('ul',[_c('li',[_v("Find which commit introduced a bug using "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git bisect")]),_v(".")]),_v(" "),_c('li',[_v("Undo a specific change by reverting a commit in the history without breaking anything else.")])])]),_v(" "),_c('ul',[_c('li',[_c('strong',[_v("The default strategy is to do a "),_c('em',[_v("squash-merge")]),_v(".")]),_v(" This is suitable when the branch tackles one task but multiple commits that are not well-organized (as per the definition of 'well-organized' in the panel below).")])]),_v(" "),_c('div',{staticClass:"indented-level1"},[_c('panel',{attrs:{"minimized":""},scopedSlots:_u([{key:"header",fn:function(){return [_c('p',[_c('span',[_c('span',{staticClass:"glyphicon glyphicon-log-in",attrs:{"aria-hidden":"true"}})]),_v(" Guidelines » Working with git » "),_c('strong',[_v("Organizing commits")])])]},proxy:true}])},[_v(" "),_c('div',[_c('h2',{attrs:{"id":"organizing-commits-3"}},[_v("Organizing commits"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#organizing-commits-3","onclick":"event.stopPropagation()"}})]),_v(" "),_c('p',[_v("Commits in a branch or a PR is said to be "),_c('em',[_v("well-organized")]),_v(" if they have the following qualities:")]),_v(" "),_c('ul',[_c('li',[_c('p',[_c('strong',[_v("Each commit contains a single logical change, and this change must stand on its own.")]),_v(" i.e. each commit has a single responsibility, and that responsibility must be fully carried out."),_c('br'),_v("\nFor example, if the commit message says "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Move delete() from Person class to Address class")]),_v(", the commit cannot contain the addition of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("delete()")]),_v(" to "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Address")]),_v(" class only; it should also contain the deletion of "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("delete()")]),_v(" from the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("Person")]),_v(" class for it to be a "),_c('em',[_v("complete")]),_v(" implementation what is stated in the commit message.")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Each commit has a "),_c('em',[_v("well-written")]),_v(" commit message")]),_v(" i.e., it follows "),_c('a',{attrs:{"href":"/guides/conventions/git.html"}},[_v("these guidelines")]),_v(".")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Commits are ordered in a bottom-up fashion")]),_v(", each commit building on top of the previous one towards the end goal of the PR.")]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("Rationale: Reviewers should be able to review one commit at a time.")])])],1),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Ideally, a commit does not modify more than 100 lines of code.")])]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("Rationale: Bigger commits are harder to review.")]),_v(" "),_c('p',[_c('span',{staticClass:"fas fa-quote-left",attrs:{"aria-hidden":"true"}}),_v(" \"Ask a programmer to review 10 lines of code, he'll find 10 issues. Ask him to do 500 lines and he'll say it\nlooks good.\" --["),_c('a',{attrs:{"href":"https://twitter.com/girayozil/status/306836785739210752"}},[_v("source")]),_v("]")])]),_v(" "),_c('p',[_v("Commits containing "),_c('em',[_c('em',[_v("mechanical changes")])]),_v(" (e.g. automated refactorings, cut-paste type code movements, file renames, etc.),")]),_v(" "),_c('ul',[_c('li',[_v("should include only one "),_c('em',[_v("mechanical change")]),_v("  per commit e.g., rename a single variable across the code base.")]),_v(" "),_c('li',[_v("should not contain other non-mechanical changes, unless unavoidable.")]),_v(" "),_c('li',[_v("can exceed 100 LoC.")]),_v(" "),_c('li',[_v("should have the description of the change in the commit message (so that the results can be reproduced).")])])],1),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Every commit pass CI.")]),_v(" when you merge a series of commits (without squashing), every commit in your push (not just the last commit) should pass CI.")]),_v(" "),_c('box',{attrs:{"type":"info","seamless":""}},[_c('p',[_v("Rationale: Build-breaking commits in the version history hinder the ability to use "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("git bisect")]),_v(" for locating bugs.")])])],1)]),_v(" "),_c('box',{attrs:{"type":"info"}},[_c('p',[_c('a',{attrs:{"href":"https://github.com/se-edu/addressbook-level4/pull/237"}},[_v("Here")]),_v(" is an example PR of commits that are organized as described above.")])]),_v(" "),_c('p',[_c('strong',[_v("Refactor commits before pushing.")]),_v(" It is unlikely that you can produce a series of commits that meet all the above criteria in the first try. In such cases, refactor commits until they meet the criteria. "),_c('a',{attrs:{"href":"http://stackoverflow.com/a/1186549"}},[_v("This S/O post")]),_v(" describes how to refactor commits (even easier to do with visual tools such as SourceTree -- see "),_c('a',{attrs:{"href":"https://www.youtube.com/watch?v=mBCJCuU3p7I"}},[_v("this video")]),_v(").")])],1)])],1),_v(" "),_c('p'),_v(" "),_c('ul',[_c('li',[_c('p',[_c('strong',[_v("Use a "),_c('em',[_v("merge commit")])]),_v(" if the commits are well-organized, and the branch tackles only one task. In this case the commit message of the merge commit should explain the full task.")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("Use a "),_c('em',[_v("rebase-merge")])]),_v(" if the commits are well-organized and each commit is an independent task (as opposed to steps or a bigger tasks).")])]),_v(" "),_c('li',[_c('p',[_c('strong',[_v("In other cases")]),_v(", consider reorganizing/splitting the branch to match one of the above.\n")])])])],1)])],1),_v(" "),_c('p'),_c('p')]),_v(" "),_c('overlay-source',{staticClass:"fixed-header-padding",attrs:{"id":"page-nav","tag-name":"nav","to":"page-nav"}},[_c('div',{staticClass:"nav-component slim-scroll"},[_c('overlay-source',{staticClass:"nav nav-pills flex-column my-0 small no-flex-wrap",attrs:{"id":"mb-page-nav","tag-name":"nav","to":"mb-page-nav"}},[_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#guidelines-for-working-with-prs"}},[_v("Guidelines for working with PRs‎")]),_v(" "),_c('nav',{staticClass:"nav nav-pills flex-column my-0 nested no-flex-wrap"},[_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#selecting-what-to-work-on"}},[_v("Selecting what to work on‎")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#scoping-a-pr"}},[_v("Scoping a PR‎")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#submitting-a-pr"}},[_v("Submitting a PR‎")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#reviewing-a-pr"}},[_v("Reviewing a PR‎")]),_v(" "),_c('a',{pre:true,attrs:{"class":"nav-link py-1","href":"#merging-prs"}},[_v("Merging PRs‎")])])])],1)]),_v(" "),_c('scroll-top-button')],1),_v(" "),_m(32)])}
};
    var pageVueStaticRenderFns = [function anonymous(
) {
with(this){return _c('h1',{attrs:{"id":"guides-for-se-student-projects"}},[_c('span',{staticClass:"text-dark"},[_c('strong',[_c('strong',[_v("Guides for SE student projects »")])])]),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#guides-for-se-student-projects","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h1',{attrs:{"id":"guidelines-for-working-with-prs"}},[_v("Guidelines for working with PRs"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#guidelines-for-working-with-prs","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"selecting-what-to-work-on"}},[_v("Selecting what to work on"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#selecting-what-to-work-on","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('li',[_v("It's best for first time contributors to start by fixing an issue specifically labelled for first timers e.g., "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("d.FirstTimers")]),_v(", "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("good first issue")]),_v(".")])}
},function anonymous(
) {
with(this){return _c('li',[_c('strong',[_v("If the issue list does not contain what you want to work on,")]),_v(" post an issue first and wait for it to be acknowledged. Otherwise you could end up fixing something that does not need fixing.")])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"scoping-a-pr"}},[_v("Scoping a PR"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#scoping-a-pr","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("General rule: try to keep PRs as small as possible")]),_v(" because smaller PRs get merged faster.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('strong',[_v("A PR should contain a "),_c('em',[_v("single")]),_v(", "),_c('em',[_v("standalone")]),_v(", and "),_c('em',[_v("complete")]),_v(" change to the code base")]),_v(", unless in exceptional cases where the PR is part of a bigger change.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('em',[_v("Single")]),_v(" means a PR "),_c('strong',[_v("should not try to fix more than one fix")]),_v(", unless there are multiple things that "),_c('em',[_v("must")]),_v(" be done together or not at all.")])}
},function anonymous(
) {
with(this){return _c('li',[_c('p',[_c('em',[_v("Standalone")]),_v(" means the PR "),_c('strong',[_v("should contain a meaningful change that moves the code base from one working state to another")]),_v(".")])])}
},function anonymous(
) {
with(this){return _c('li',[_c('p',[_c('em',[_v("Complete")]),_v(" means the PR "),_c('strong',[_v("should contain everything related to the change")]),_v(", including the following:")]),_v(" "),_c('ul',[_c('li',[_v("functional code")]),_v(" "),_c('li',[_v("code comments")]),_v(" "),_c('li',[_v("test cases")]),_v(" "),_c('li',[_v("user docs and developer docs")])])])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"submitting-a-pr"}},[_v("Submitting a PR"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#submitting-a-pr","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('p',[_v("When submitting PRs, follow "),_c('a',{attrs:{"href":"https://se-education.org/se-book/gitAndGithub/index.html#forking-workflow"}},[_v("the forking workflow")]),_v(". A summary of the steps is given below.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('span',{staticClass:"badge bg-dark bigger-level0"},[_v("Step 0")]),_v(" Do these steps if you haven't done them already:")])}
},function anonymous(
) {
with(this){return _c('div',{staticClass:"indented-level2"},[_c('p',[_c('span',{staticClass:"badge bg-dark bigger-level0"},[_v(" 0.1")]),_v(" "),_c('strong',[_v("Fork the upstream repo")]),_v(".")]),_v(" "),_c('p',[_c('span',{staticClass:"badge bg-dark bigger-level0"},[_v(" 0.2")]),_v(" "),_c('strong',[_v("Clone the fork to your computer.")])]),_v(" "),_c('p',[_c('span',{staticClass:"badge bg-dark bigger-level0"},[_v(" 0.3")]),_v(" "),_c('strong',[_v("Set up the dev environment as described in the project docs.")]),_v(" Confirm the set up is correct.")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('span',{staticClass:"badge bg-dark bigger-level0"},[_v("Step 1")]),_v(" "),_c('strong',[_v("Create a branch from the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch")]),_v(", following the naming convention given.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('span',{staticClass:"badge bg-dark bigger-level0"},[_v("Step 2")]),_v(" "),_c('strong',[_v("Add your code to the branch")]),_v(" while ensuring you follow these:")])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_v("relevant coding standards (the full list is given "),_c('a',{attrs:{"href":"/guides/index.html"}},[_v("here")]),_v(")")]),_v(" "),_c('li',[_v("Commit message format")])])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_v("guidelines for commit organization")])])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_v("PR scoping guidelines given above")])])}
},function anonymous(
) {
with(this){return _c('p',[_c('span',{staticClass:"badge bg-dark bigger-level0"},[_v("Step 3")]),_v(" "),_c('strong',[_v("Sync your branch with the upstream master")]),_v(", if the "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(" branch advances while you work on your code (i.e., pull upstream "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("master")]),_v(", merge to your branch).")])}
},function anonymous(
) {
with(this){return _c('p',[_c('span',{staticClass:"badge bg-dark bigger-level0"},[_v("Step 4")]),_v(" "),_c('strong',[_v("Create a PR")]),_v(" when the code is ready, as follows:")])}
},function anonymous(
) {
with(this){return _c('li',[_v("Create a "),_c('a',{attrs:{"href":"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request"}},[_c('mark',[_v("draft")]),_v(" PR")]),_v(" from your fork to the upstream repo.")])}
},function anonymous(
) {
with(this){return _c('li',[_v("it follows the "),_c('a',{attrs:{"href":"/guides/conventions/github.html"}},[_v("PR format conventions")])])}
},function anonymous(
) {
with(this){return _c('li',[_v("Remove the 'draft' status of the PR. Post a "),_c('code',{pre:true,attrs:{"class":"hljs inline no-lang"}},[_v("ready for review")]),_v(" comment for good measure.")])}
},function anonymous(
) {
with(this){return _c('p',[_c('span',{staticClass:"badge bg-dark bigger-level0"},[_v("Step 5")]),_v(" "),_c('strong',[_v("Revise as per reviews")]),_v(" until the PR is merged.")])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_v("Feel free to post a reminder comment if you don't get a review within 2-3 days.")]),_v(" "),_c('li',[_v("When you receive a review,\n"),_c('ol',[_c('li',[_v("Revise the code as per the review.")]),_v(" "),_c('li',[_v("Push the new code to the branch in your fork.")]),_v(" "),_c('li',[_v("Post a comment to indicate the PR is ready for a new review.")])])])])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"reviewing-a-pr"}},[_v("Reviewing a PR"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#reviewing-a-pr","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('p',[_v("If you are new to GitHub PRs, see "),_c('a',{attrs:{"href":"https://help.github.com/en/articles/about-pull-request-reviews"}},[_v("GitHub help on how to review PRs")]),_v(".")])]),_v(" "),_c('li',[_c('p',[_v("Follow the best practices in the panel below:")])])])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('strong',[_v("Check for basic PR hygiene")]),_v(", and remind the PR author to rectify if necessary.\n"),_c('ul',{staticClass:"contains-task-list"},[_c('li',{staticClass:"task-list-item enabled"},[_c('input',{staticClass:"task-list-item-checkbox",attrs:{"checked":"","type":"checkbox"}}),_v(" contains a single, stand-alone, complete fix")]),_v(" "),_c('li',{staticClass:"task-list-item enabled"},[_c('input',{staticClass:"task-list-item-checkbox",attrs:{"checked":"","type":"checkbox"}}),_v(" relevant comments, dev/user docs, tests have been updated")]),_v(" "),_c('li',{staticClass:"task-list-item enabled"},[_c('input',{staticClass:"task-list-item-checkbox",attrs:{"checked":"","type":"checkbox"}}),_v(" PR title/description format is expected")]),_v(" "),_c('li',{staticClass:"task-list-item enabled"},[_c('input',{staticClass:"task-list-item-checkbox",attrs:{"checked":"","type":"checkbox"}}),_v(" doesn't contain unrelated changes")])])])])}
},function anonymous(
) {
with(this){return _c('ul',[_c('li',[_c('strong',[_v("Before approving a PR, "),_c('mark',[_v("confirm that all your previous comments have been addressed")]),_v(".")])])])}
},function anonymous(
) {
with(this){return _c('h2',{attrs:{"id":"merging-prs"}},[_v("Merging PRs"),_c('a',{staticClass:"fa fa-anchor",attrs:{"href":"#merging-prs","onclick":"event.stopPropagation()"}})])}
},function anonymous(
) {
with(this){return _c('footer',[_c('div',{staticClass:"text-center"},[_c('small',[_v("[Powered by "),_c('img',{attrs:{"src":"https://markbind.org/favicon.ico","width":"30"}}),_v(" "),_c('a',{attrs:{"href":"https://markbind.org/"}},[_v("MarkBind 5.5.3")]),_v(" on Mon, 30 Sept 2024, 10:12:16 GMT+8]")])])])}
}];
  